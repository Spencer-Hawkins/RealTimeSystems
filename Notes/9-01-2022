/*
Class Agenda:
  -Drawing a Schedule
  -EDD
  -Schedulability
  -Optimality
  -EDF
  
  
  
  -Drawking a Schedule            __________
      T_1: (C_1, D_1) = (3,5)   /|\         |       \/    
                                0___1___2___3___4___5________________
                                            _________
   T_2: (C_2, D_2) = (2,4)   /\             |  \/    |
                                0___1___2___3___4___5___
    
 Earliest Due Date Algorithm:
    At time 0, we look among tasks that are available for execution and then select the task which has the soonest deadline
    
    Task set {T_1, T_2} is Schedulable under EDD
    
    
SCHEDULABLE:
    --All tasks meet all of their deadlines
    
Schedublability Test for EDD:
    --Renumber task by earliest deadline
    f_1 = C_1 <=d_1
    f_2 = C_1+C_2 <=d_1+d_2
    
    For All i in {1...n} Check the Sum of C_k up to C_i is <= D_i
    
    
Sufficient
  --if test system passes, then it is schedulable
      EX: Sum up all computation times and check if sum is less than soonest Deadline
  
Necessary 
  --if test system fails, then it is not schedulable
      EX: Check if Computation time for task 1 <= Deadline for the first task
  
Exact
  --if the test is both necessary and sufficient
      EX:Order tasks by deadline time and then check if sum of computation times is less than deadline for task_i
      
      
      
OPTIMALITY:
    --one that produces a schedule for a task set in which all deadlines are met if any algorithm produces such a schedule

    EX:
      --EDD is optimal scheduling algorithm
  
      THM. For a Task set comprised of one-shot-jobs with release time of 0, EDD is optimal 
      PROOF
        -- Let o be the schedule produced by algorithm A with no deadline misses for Task Set. 
           If A != EDD, then For all J_a,J_b w/ d_a, d_b s.t. J_b immediately proceeds J_a in o
           Let o' be the schedule created by exchanging J_a w/ J_b. Before, f_b<f_a<=d_a<=d_b, Need to show f'_a <=d_a && f'_b<=d_b
           becuase f_'a<f_a<=d_a      f'_b=f_a<=d_b
           Finite # of transformations, o will be transformed to EDD schedule w/ all deadlines met
        
        
TYPES OF TASKS:
    Periodic:
      --repeat at regular intervals-- EX: Bells on a clock every hour
    APeriodic:
      --One-Shot-Jobs Ex: turning in paperwork to start a job
      --Sporadic Ex: Pooping for people not on schedule)
 
(P_i, T_i, C_i, D_i)

P -- Phase -- time after time 0 the task is released
T -- Period -- How often the task repeats


EDF
  Earliest Deadline First:
    --chose the task with the earliest deadline able to execute

*/
